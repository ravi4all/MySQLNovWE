Queries
------------------------------------------------------------------------------------------------------------------------------
Database Operations

SELECT database();
SHOW databases;
USE db_name;
Create Database
SYNTAX : CREATE DATABASE [IF NOT EXISTS] emp_management [CHARACTER SET charset_name] [COLLATE collation_name];

show character set;
SHOW CHARACTER SET LIKE 'utf%';
show collation like 'latin1%';

SET @str = CONVERT('Hello World' USING utf8);
SELECT LENGTH(@str), CHAR_LENGTH(@str);


I18N - Internationalization

Drop Database
SYNTAX : DROP DATABASE [IF EXISTS] db_name;
DROP SCHEMA [IF EXISTS] db_name;
------------------------------------------------------------------------------------------------------------------------------
Table Operations

- SHOW tables - list all tables available in database

Create Table Query
SYNTAX : CREATE TABLE [IF NOT EXISTS] table_name (col col_definition, col col_definition...., table_constraints) ENGINE = storage_engine;

col_definition - data_type(length) [NOT NULL] [DEFAULT VALUE] [AUTO_INCREMENT] col_constraint

CREATE TABLE IF NOT EXISTS projects (project_id INT AUTO_INCREMENT PRIMARY KEY, project_name VARCHAR(255) NOT NULL, start_date DATE, status VARCHAR(255), number_of_emp TINYINT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP) ENGINE=INNODB;


Storage Engines in MySQL
- MyISAM (Upto 256TB data could be stored)
- InnoDB  (by default used by MySQL, Upto 64TB data could be stored, ACID and transactions are fully supported)
- Merge
- Heap
- CSV
- FEDERATED

Query : SHOW engines;

CREATE TABLE IF NOT EXISTS employees (emp_id INT AUTO_INCREMENT PRIMARY KEY, emp_name VARCHAR(255), emp_dept VARCHAR(100), emp_salary INT, emp_city VARCHAR(255));



CREATE TABLE IF NOT EXISTS projectAllocation (project_id INT, emp_id INT, is_active BOOLEAN NOT NULL DEFAULT FALSE, FOREIGN KEY (project_id) REFERENCES projects (project_id) ON UPDATE RESTRICT ON DELETE CASCADE, FOREIGN KEY (emp_id) REFERENCES employees (emp_id) ON UPDATE RESTRICT ON DELETE CASCADE);


Foreign Key [col_name] References parent_table (col_name)
ON UPDATE reference_option
ON DELETE reference_option

- CASCADE - child table automatically deleted or updated the matching rows
- SET NULL - child table will set NULL on matchin rows
- RESTRICT - rejects deletion or updation
- NO ACTION - same as Restrict
- SET DEFAULT - 


Data Types
- Numeric
  - TinyInt 					1 byte					-128 to 127
  - SmallInt					2 bytes
  - MediumInt				3 bytes
  - Int							4 bytes
  - BigInt						8 bytes
  - Decimal					varies 
  - Float						4 bytes
  - Double					8 bytes
  - Bit

- Text/String
  - Char				- fixed length non-binary character
  - Varchar 			- variable length non-binary character
  - Binary			- fixed length binary string
  - VarBinary		- variable length binary string
  - TinyBlob			- very small Binary Large Object
  - Blob				- small Blob
  - MediumBlob	- medium size Blob
  - LongBlob		- large Blob
  - TinyText
  - Text
  - MediumText
  - LongText


- Date and Time
  - Date
  - Time
  - DateTime		1000-01-01 00:00:00  to  9999-12-31 23:59:59
  - TimeStamp		1970-01-01 00:00:01  to  2038-12-31 03:14:07
  - Year



Decimal Example
col_name DECIMAL(P,D)
P - Precision - number of significant digits (1 to 65)
D - Decimal Point - number of digits after decimal point (0 to 30)

SALARY DECIMAL(6,2)
-9999.99 to 9999.99

==============================================

Insert Data
- INSERT INTO table (col_list) VALUES (values);
- INSERT INTO table (col_list) VALUES (values), (values), (values);
- INSERT INTO table VALUES (values);

INSERT INTO projects(project_name, start_date, status, number_of_emp) VALUES ('Banking App', '2022-12-12', 'not started', 6);
INSERT INTO projects VALUES (5, 'Banking App', '2022-05-05', 'finished', 10, '2022-01-01');

==============================================

Alter Table
- Add a column to a table

SYNTAX : ALTER TABLE table_name ADD new_col col_definition [FIRST | AFTER col_name]
SYNTAX : ALTER TABLE table_name ADD new_col col_definition [FIRST | AFTER col_name], ADD new_col col_definition [FIRST | AFTER col_name];
ALTER TABLE employees ADD emp_doj date AFTER emp_salary;

- Drop column from a table
SYNTAX : ALTER TABLE table_name DROP COLUMN col_name;
SYNTAX : ALTER TABLE table_name DROP COLUMN col_name, DROP COLUMN col_name;
ALTER TABLE employees DROP COLUMN emp_doj;

- Modify a column
SYNTAX : ALTER TABLE table_name MODIFY col_name col_definition;
ALTER TABLE employees MODIFY emp_name varchar(100) NOT NULL;

- Rename a column
SYNTAX : ALTER TABLE table_name CHANGE COLUMN prev_name new_name col_definition;
ALTER TABLE employees CHANGE COLUMN emp_dept emp_department varchar(100) NOT NULL;

SYNTAX : ALTER TABLE table_name RENAME COLUMN prev_name TO new_name;
ALTER TABLE employees RENAME COLUMN emp_department TO emp_dept;


- Rename Table
SYNTAX : ALTER TABLE table_name RENAME TO new_name;

====================================================
select * from employees;
select emp_name, emp_salary, emp_dept from employees;
select emp_dept from employees;
select distinct emp_dept from employees;

====================================================
Where Clause
SYNTAX : SELECT col_list FROM employees WHERE search_condition;
SELECT * FROM employees WHERE emp_city = "delhi";

Query Execution Flow - FROM -> WHERE -> SELECT

Logical Operators
- AND
- OR
- IN
- BETWEEN

Comparison Operators
=, >,<, >=, <=, !=

SELECT * FROM employees WHERE emp_city = "delhi" and emp_dept = "HR";
SELECT * FROM employees WHERE emp_city != "delhi" and emp_dept = "HR";
SELECT * FROM employees WHERE emp_city != "delhi" or emp_dept = "HR";
SELECT * FROM employees WHERE emp_salary > 40000;
SELECT * FROM employees WHERE emp_salary >= 40000;
SELECT * FROM employees WHERE emp_salary BETWEEN 40000 AND 50000;
SELECT * FROM employees WHERE emp_city = "delhi" or emp_city = "pune";
SELECT * FROM employees WHERE emp_city IN ("delhi", "pune");

====================================================

Sorting Using Order By
SYNTAX : SELECT * FROM table ORDER BY col [ASC|DESC];
SELECT * FROM employees ORDER BY emp_salary;
SELECT * FROM employees ORDER BY emp_salary DESC, emp_name ASC;
SELECT * FROM employees WHERE emp_city IN ("Delhi","Pune") ORDER BY emp_salary DESC, emp_name ASC;

SELECT * FROM employees ORDER BY emp_name;

====================================================

LIKE Operator
SYNTAX : SELECT * FROM table WHERE col_name LIKE pattern;
- wildcard

% (percentage)
a%			- starts with 'a'
%a			- ends with 'a'
%a%		- contains 'a'

SELECT * FROM employees WHERE emp_name LIKE 'r%';
SELECT * FROM employees WHERE emp_name LIKE '%n';
SELECT * FROM employees WHERE emp_name LIKE '%a%';

_ (underscore)
'R_m'	- Name startswith R and endswith m and in between 1 character could be there
SELECT * FROM employees WHERE emp_name LIKE 'R_m';

===================================================

LIMIT
SYNTAX : SELECT col_list FROM table_name LIMIT [offset,] row_count;

SELECT * FROM employees LIMIT 1;
SELECT * FROM employees LIMIT 2, 1;

Max Salary of Employee
SELECT * FROM employees ORDER BY emp_salary DESC Limit 1;

2nd Max Salary of Employee
SELECT * FROM employees ORDER BY emp_salary DESC Limit 1, 1;

Nth Max Salary of Employee
SELECT * FROM employees ORDER BY emp_salary DESC Limit n-1, 1;


Pagination
SELECT * FROM employees LIMIT 10, 10;

========================================

Load CSV File in MySQL
LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/emp.csv" INTO TABLE employees FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' IGNORE 1 ROWS;

Load Table Into SQL
SELECT * FROM table_name INTO OUTFILE "D:/emp.csv" TERMINATED BY ";" LINES TERMINATED BY "\r\n";

========================================

Group By

For Each
SYNTAX : SELECT col_list FROM table_name GROUP BY col_name;
SELECT * FROM employees GROUP BY emp_dept;

Aggregate Functions
- COUNT
- MIN
- MAX
- AVG
- SUM

Number of employees in each department
SELECT emp_dept, COUNT(*) number_of_emp FROM employees GROUP BY emp_dept;

Max salary in each department
SELECT emp_dept, max(emp_salary) emp_salary FROM employees GROUP BY emp_dept;

Avg salary in each department
SELECT emp_dept, avg(emp_salary) emp_salary FROM employees GROUP BY emp_dept;

Min, Max, Avg, Total
SELECT emp_dept, min(emp_salary) min_salary, max(emp_salary) max_salary, avg(emp_salary) avg_salary, sum(emp_salary) total_salary FROM employees GROUP BY emp_dept;

Having Clause
- Using condition after group by
SELECT emp_dept, avg(emp_salary) avg_salary FROM employees GROUP BY emp_dept HAVING avg_salary > 40000;

Group By and Order By
SELECT emp_dept, min(emp_salary) min_salary, max(emp_salary) max_salary, avg(emp_salary) avg_salary, sum(emp_salary) total_salary FROM employees GROUP BY emp_dept ORDER BY total_salary DESC;

=================================================

Update Query
SYNTAX : UPDATE [LOW_PRIORITY] [IGNORE] table_name SET col_name = expr ... [WHERE condition];

UPDATE employees SET emp_dept = "Sales" WHERE emp_id = 5;

=================================================

Joins...
- Inner Join
- Left Join
- Right Join
- Cross Join
- Self Join
- Full Outer Join (Not Supported in MySQL)


insert into projects (project_id, project_name, start_date, status, number_of_emp) values(2, "Mall Customer Segmentation", "2019-05-12", "finished", 7), (3, "Hotel Management", "2022-09-11", "in progress", 7), (4, "Library Management", "2017-05-04", "finished", 5), (6, "Hotel Management", "2021-01-03", "finished", 9), (7, "ERP System", "2021-11-11", "in progress", 14), (8, "Chat Application", "2022-09-05", "in progress", 8);


insert into projectallocation values(1,1,1), (1,2,1), (1,3,1), (1,8,1), (2,11,0), (2,10,0), (2,7,0), (2,1,0), (3,10,1), (3,2,1), (3,9,1), (3,6,1), (3,13,1), (3,12,1);


Inner Join
SYNTAX : SELECT col_list FROM table_1 INNER JOIN table_2 ON join_condition;

SELECT DISTINCT t1.project_name, t1.status, t2.is_active FROM projects t1 INNER JOIN projectallocation t2 ON t1.project_id = t2.project_id;

SELECT DISTINCT t1.project_name, t1.status, t2.is_active FROM projects t1 LEFT JOIN projectallocation t2 ON t1.project_id = t2.project_id;

SELECT t1.project_name, t1.status, t2.is_active FROM projects t1 RIGHT JOIN projectallocation t2 ON t1.project_id = t2.project_id;

SELECT t1.project_name, t3.emp_name,  t2.is_active FROM projects t1 INNER JOIN projectallocation t2 ON t1.project_id = t2.project_id INNER JOIN employees t3 ON t2.emp_id=t3.emp_id;

SELECT t1.emp_id, t1.emp_name, t1.emp_dept, t2.project_id, t2.is_active from employees t1 INNER JOIN projectallocation t2 ON t1.emp_id = t2.emp_id;

SELECT t2.emp_name, t1.emp_name, t1.emp_city FROM employees t1 INNER JOIN employees t2 ON t1.emp_city = t2.emp_city AND t1.emp_name > t2.emp_name;

=======================================================

Sub/Nested Queries
- Query Inside a Query

SELECT t1.emp_id, t1.emp_name, t1.emp_dept, t2.project_id, t2.is_active from employees t1 INNER JOIN projectallocation t2 ON t1.emp_id = t2.emp_id;

SELECT emp_id, emp_name, emp_dept FROM employees WHERE emp_id IN (SELECT emp_id FROM projectallocation);










